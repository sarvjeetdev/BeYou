# # 1. Redirect all HTTP requests to HTTPS
# server {
#     listen 80;
#     server_name 192.168.2.239;

#     # Redirect to the same host on HTTPS
#     return 301 https://$host$request_uri;
# }

# # 2. Actual HTTPS server block
# server {
#     listen 443 ssl;
#     server_name 192.168.2.239;  # Use your IP or domain name here

#     # SSL certificate files
#     ssl_certificate     /etc/nginx/ssl/beyou.crt;
#     ssl_certificate_key /etc/nginx/ssl/beyou.key;

#     # (Optional) Basic security best practices for SSL
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_prefer_server_ciphers on;
#     ssl_ciphers HIGH:!aNULL:!MD5;

#     # ✅ Serve STATIC files (like admin CSS, JS, your static/)
#     location /static/ {
#         alias /app/static/;  # Make sure this matches your Django STATIC_ROOT
#         expires 30d;
#         add_header Cache-Control "public";
#     }

#     # # ✅ Serve MEDIA files if any (profile pics, uploads, etc.)
#     # location /media/ {
#     #     alias /app/media/;  # Only if you use MEDIA_ROOT
#     #     expires 30d;
#     #     add_header Cache-Control "public";
#     # }

#     # 3. Proxy requests to the Django backend service
#     location / {
#         proxy_pass http://backend:8000;

#         # Pass along real IP info and host headers
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }
# }

limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=5r/s;
limit_req_zone $binary_remote_addr zone=req_limit_login:10m rate=2r/m;

server {
    listen 443 ssl;
    server_name 192.168.2.239;

    ssl_certificate     /etc/nginx/ssl/beyou.crt;
    ssl_certificate_key /etc/nginx/ssl/beyou.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location /static/ {
        alias /app/static/;
        expires 30d;
        add_header Cache-Control "public";
    }

    # Rate limit login page harshly
    location /login/ {
        limit_req zone=req_limit_login burst=2 nodelay;
        proxy_pass http://backend:8000;
        include /etc/nginx/proxy_params;
    }

    # General site rate limit
    location / {
        limit_req zone=req_limit_per_ip burst=10 nodelay;
        proxy_pass http://backend:8000;
        include /etc/nginx/proxy_params;
    }

    # Handle errors with friendly pages
    error_page 500 502 503 504 /custom_50x.html;
    location = /custom_50x.html {
        root /usr/share/nginx/html;
        internal;
    }
}
